name: Build Armbian

on:
  workflow_dispatch:
    inputs:
      board:
        type: choice
        description: '开发板型号 (hinlink-h68k)'
        options:
          - hinlink-h28k
          - hinlink-h66k
          - hinlink-h68k
          - hinlink-h88k
          - hinlink-hnas
          - hinlink-ht2
        required: true
        default: 'hinlink-h68k'
      branch:
        type: choice
        description: 'Armbian 分支 (如: current, edge)'
        options:
          - current
          - edge
        required: true
        default: 'current'
      release:
        type: choice
        description: '发行版 (如: bookworm, bullseye, buster, focal, jammy, noble, oracular, plucky, sid, trixie)'
        options:
          - bookworm
          - bullseye
          - buster
          - focal
          - jammy
          - noble
          - oracular
          - plucky
          - sid
          - trixie
        required: true
        default: 'trixie'
      build_desktop:
        type: choice
        description: '是否构建桌面版 (yes/no)'
        options:
          - 'yes'
          - 'no'
        required: true
        default: 'no'
      build_minimal:
        type: choice
        description: '是否构建最小化系统 (yes/no)'
        options:
          - 'yes'
          - 'no'
        required: true
        default: 'yes'
      kernel_configure:
        type: choice
        description: '是否配置内核 (yes/no)'
        options:
          - 'yes'
          - 'no'
        required: true
        default: 'no'
  push:
    branches: [ main ]
    paths: 
      - 'config/**'  # 当配置文件变更时触发

env:
  BUILD_ARGS: ""

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用 Ubuntu 22.04 作为构建环境
    timeout-minutes: 240   # 设置超时时间，编译可能需要很长时间
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
        sudo apt-get install -y \
          git \
          build-essential \
          flex \
          bison \
          libssl-dev \
          libncurses5-dev \
          rsync \
          python3 \
          device-tree-compiler \
          u-boot-tools \
          parted \
          debootstrap \
          dosfstools \
          qemu-user-static \
          bc \
          curl \
          zip \
          unzip \
          aria2 \
          software-properties-common
    
    - name: 克隆 Armbian 构建系统
      run: |
        git clone --single-branch --depth=1 --branch=main https://github.com/armbian/build.git build
        
    - name: 创建并配置自定义软件包
      run: |
        cd build
        mkdir -p userpatches
        cat > userpatches/customize-image.sh << 'EOF'
        #!/bin/bash
        
        echo "开始自定义系统镜像..."
        # 修复 sudo: unable to resolve host 错误
        echo "127.0.0.1 $(cat /etc/hostname)" >> /etc/hosts

        # 安装额外软件包 - 不需要使用 sudo，因为脚本以 root 权限运行
        apt-get update
        
        # 基础工具
        apt-get install -y \
          curl \
          gnupg \
          lsb-release \
          pciutils \
          net-tools \
          iperf3 \
          zip \
          unzip \
          iputils-ping \
          vim \
          iftop \
          iotop \
          mtr \
          wget \
          qrencode \
          python3 \
          python3-pip \
          python3-venv
          
        # 检查并安装可用的网络时间协议工具
        if apt-cache show ntpdate >/dev/null 2>&1; then
            apt-get install -y ntpdate
        elif apt-cache show ntpsec-ntpdate >/dev/null 2>&1; then
            apt-get install -y ntpsec-ntpdate
        fi
        
        # 检查并安装容器相关工具
        if apt-cache show lxc >/dev/null 2>&1; then
            apt-get install -y \
              lxc \
              lxc-templates \
              bridge-utils
        fi
        
        # sudo 通常已经安装，但确认一下
        if ! command -v sudo >/dev/null 2>&1; then
            apt-get install -y sudo
        fi
        
        echo "系统自定义完成。"
        EOF
        
        chmod +x userpatches/customize-image.sh

    - name: 准备配置文件 (如果存在)
      run: |
        if [ -d "config" ]; then
          cp -r config/* build/config/
        fi
        
    - name: 设置构建参数
      run: |
        cd build
        # 设置构建参数，使用正确的默认值
        echo "BOARD=${{ github.event.inputs.board || 'hinlink-h68k' }}" >> $GITHUB_ENV
        echo "BRANCH=${{ github.event.inputs.branch || 'current' }}" >> $GITHUB_ENV
        echo "RELEASE=${{ github.event.inputs.release || 'trixie' }}" >> $GITHUB_ENV
        echo "BUILD_DESKTOP=${{ github.event.inputs.build_desktop || 'no' }}" >> $GITHUB_ENV
        echo "BUILD_MINIMAL=${{ github.event.inputs.build_minimal || 'yes' }}" >> $GITHUB_ENV
        echo "KERNEL_CONFIGURE=${{ github.event.inputs.kernel_configure || 'no' }}" >> $GITHUB_ENV
        
    - name: 编译 Armbian
      run: |
        cd build
        # 开始编译，使用新的命令格式
        ./compile.sh build \
          BOARD=${{ env.BOARD }} \
          BRANCH=${{ env.BRANCH }} \
          RELEASE=${{ env.RELEASE }} \
          BUILD_DESKTOP=${{ env.BUILD_DESKTOP }} \
          BUILD_MINIMAL=${{ env.BUILD_MINIMAL }} \
          KERNEL_CONFIGURE=${{ env.KERNEL_CONFIGURE }} \
          SHOW_DEBUG=no \
          ${{ env.BUILD_ARGS }}
          
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: armbian-${{ env.BOARD }}-${{ env.RELEASE }}
        path: build/output/images/
        
    - name: 清理缓存 (可选)
      if: always()
      run: |
        sudo rm -rf build/cache
        sudo rm -rf build/output/debs
